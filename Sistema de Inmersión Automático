#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled 2"
  https://create.arduino.cc/cloud/things/3955e295-10c0-4f89-936c-f2defedbdba6 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float distanciaBajada;
  float oxigeno;
  int tiempoEntreCiclos;
  int tiempoSumergido;
  bool botonEncendidoYApagado;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
*/

#include "thingProperties.h"

const int dirPin = 3;
const int stepPin = 4;
const int enPin = 5;
const int brakePin = 6; // Pin para el freno electromagnético

// Variables internas para guardar valores previos
float distanciaBajadaAnterior = 0;
int tiempoSumergidoAnterior = 0;
int tiempoEntreCiclosAnterior = 0;

void setup() {
  Serial.begin(9600);
  delay(1500);

  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enPin, OUTPUT);
  pinMode(brakePin, OUTPUT);

  digitalWrite(enPin, HIGH); // Activar el pin enable
  digitalWrite(brakePin, HIGH); // Desactivar el freno al inicio

  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  botonEncendidoYApagado = false; // Inicializar el sistema apagado
}

void loop() {
  ArduinoCloud.update();

  if (botonEncendidoYApagado) {
    distanciaBajadaAnterior = distanciaBajada;
    tiempoSumergidoAnterior = tiempoSumergido;
    tiempoEntreCiclosAnterior = tiempoEntreCiclos;

    moverMotor();
    delay(tiempoEntreCiclosAnterior * 1000); // Tiempo entre ciclos
  }
}

void moverMotor() {
  digitalWrite(brakePin, LOW); // Activar el freno
  delay(100); // Espera para asegurar que el freno esté activo

  digitalWrite(dirPin, HIGH); // Configurar dirección hacia abajo
  int pasos = distanciaBajadaAnterior * 320; // Calcular pasos según la distancia

  for (int x = 0; x < pasos; x++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(150);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(150);
  }

  delay(tiempoSumergidoAnterior * 1000); // Esperar el tiempo sumergido
  oxigeno = random(600, 650) / 10.0; // Generar valor aleatorio de oxígeno
  Serial.print("Nivel de oxígeno: ");
  Serial.println(oxigeno);

  digitalWrite(dirPin, LOW); // Cambiar dirección para subir
  digitalWrite(brakePin, LOW); // Activar el freno

  for (int x = 0; x < pasos; x++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(250);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(250);
  }

  digitalWrite(brakePin, HIGH); // Desactivar el freno
  delay(100); // Espera para liberar el freno
}

void onBotonEncendidoYApagadoChange() {
  Serial.print("Estado del Botón Encendido/Apagado: ");
  Serial.println(botonEncendidoYApagado ? "ON" : "OFF");
}

void onDistanciaBajadaChange() {
  if (!botonEncendidoYApagado) {
    Serial.print("Nueva Distancia de Bajada: ");
    Serial.println(distanciaBajada);
  } else {
    distanciaBajada = distanciaBajadaAnterior;
    Serial.println("No se puede modificar la distancia mientras el sistema está encendido.");
  }
}

void onTiempoSumergidoChange() {
  if (!botonEncendidoYApagado) {
    Serial.print("Nuevo Tiempo Sumergido: ");
    Serial.println(tiempoSumergido);
  } else {
    tiempoSumergido = tiempoSumergidoAnterior;
    Serial.println("No se puede modificar el tiempo sumergido mientras el sistema está encendido.");
  }
}

void onTiempoEntreCiclosChange() {
  if (!botonEncendidoYApagado) {
    Serial.print("Nuevo Tiempo entre Ciclos: ");
    Serial.println(tiempoEntreCiclos);
  } else {
    tiempoEntreCiclos = tiempoEntreCiclosAnterior;
    Serial.println("No se puede modificar el tiempo entre ciclos mientras el sistema está encendido.");
  }
}

void onOxigenoChange() {
  Serial.print("Nivel de Oxígeno Actualizado: ");
  Serial.println(oxigeno);
}
